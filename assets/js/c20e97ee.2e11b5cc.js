"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2040],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),p=i,m=c["".concat(l,".").concat(p)]||c[p]||f[p]||o;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4199:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},Highlight:function(){return f},default:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={tags:["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","\u56fe","\u62d3\u6251\u6392\u5e8f","\u5251\u6307offer\u4e13\u9879\u7248"],id:"leetcode_OfferII113",title:"\ud83d\udfe1 \u5251\u6307 Offer II 113. \u8bfe\u7a0b\u987a\u5e8f",ques_id:"OfferII113",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/QA2IGt/",online_name:"\u8bfe\u7a0b\u987a\u5e8f",level:"m"},l=void 0,d={unversionedId:"\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII113",id:"\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII113",isDocsHomePage:!1,title:"\ud83d\udfe1 \u5251\u6307 Offer II 113. \u8bfe\u7a0b\u987a\u5e8f",description:"<span",source:"@site/docs\\\u5251\u6307offer\u4e13\u9879\u7248\\leetcode_OfferII113.mdx",sourceDirName:"\u5251\u6307offer\u4e13\u9879\u7248",slug:"/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII113",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII113",tags:[{label:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/trashbin/docs/tags/\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{label:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/trashbin/docs/tags/\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{label:"\u56fe",permalink:"/trashbin/docs/tags/\u56fe"},{label:"\u62d3\u6251\u6392\u5e8f",permalink:"/trashbin/docs/tags/\u62d3\u6251\u6392\u5e8f"},{label:"\u5251\u6307offer\u4e13\u9879\u7248",permalink:"/trashbin/docs/tags/\u5251\u6307offer\u4e13\u9879\u7248"}],version:"current",frontMatter:{tags:["\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","\u56fe","\u62d3\u6251\u6392\u5e8f","\u5251\u6307offer\u4e13\u9879\u7248"],id:"leetcode_OfferII113",title:"\ud83d\udfe1 \u5251\u6307 Offer II 113. \u8bfe\u7a0b\u987a\u5e8f",ques_id:"OfferII113",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/QA2IGt/",online_name:"\u8bfe\u7a0b\u987a\u5e8f",level:"m"},sidebar:"bffer",previous:{title:"\ud83d\udfe1 \u5251\u6307 Offer II 110. \u6240\u6709\u8def\u5f84",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII110"},next:{title:"\ud83d\udd34 \u5251\u6307 Offer II 114. \u5916\u661f\u6587\u5b57\u5178",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII114"}},u=[{value:"\u9898\u89e31",id:"\u9898\u89e31",children:[]},{value:"\u6284\u5b98\u65b9\u7b54\u6848\u7684\u9898\u89e32",id:"\u6284\u5b98\u65b9\u7b54\u6848\u7684\u9898\u89e32",children:[]},{value:"\u4ee5\u53ca\u9898\u89e33",id:"\u4ee5\u53ca\u9898\u89e33",children:[]}],f=function(e){var n=e.children,t=e.color;return(0,o.kt)("span",{style:{backgroundColor:t,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},n)},c={toc:u,Highlight:f};function p(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"LeetCode \u63d0\u793a")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"\u9898\u76ee\u96be\u5ea6 ",(0,o.kt)(f,{color:"#ffc01e",mdxType:"Highlight"},"\u4e2d\u7b49")),(0,o.kt)("p",{parentName:"div"},"\u539f\u9898\u94fe\u63a5 ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/QA2IGt/"},"\ud83d\udd17 leetcode")))),(0,o.kt)("h2",{id:"\u9898\u89e31"},"\u9898\u89e31"),(0,o.kt)("p",null,"\u81ea\u5df1\u601d\u8003\u7684\u7ed3\u679c\u3002\u6709\u70b9\u7ed5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    private Map<Integer, List<Integer>> route = new HashMap<>();\n    private Map<Integer, List<Integer>> parents = new HashMap<>();\n    private Set<Integer> canBeHead = new HashSet<>();\n\n    private Set<Integer> visited;\n\n    private void travel(int startNode) {\n        visited = new LinkedHashSet<>();\n        for (int head: canBeHead) {\n            dfs(head);\n        }\n    }\n\n    private void dfs(int node) {\n        if (visited.contains(node)) {\n            return;\n        }\n        visited.add(node);\n        if (route.get(node) == null) {\n            return;\n        }\n        for (int nxt : route.get(node)) {\n            boolean flag = true;\n            for (int parent : parents.getOrDefault(nxt, Collections.emptyList())) {\n                if (!visited.contains(parent)) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                dfs(nxt);\n            }\n        }\n    }\n\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        for (int i=0; i<numCourses; i+= 1){\n            canBeHead.add(i);\n        }\n        for (var pre: prerequisites) {\n            canBeHead.remove(pre[0]);\n\n            if (route.get(pre[1]) == null) {\n                route.put(pre[1], new ArrayList<Integer>());\n            }\n            route.get(pre[1]).add(pre[0]);\n\n            if (parents.get(pre[0]) == null) {\n                parents.put(pre[0], new ArrayList<Integer>());\n            }\n            parents.get(pre[0]).add(pre[1]);\n        }\n        if (canBeHead.size() == 0) {\n            return new int[0];\n        }\n\n        for (Integer head : canBeHead) {\n            travel(head);\n            if (visited.size() == numCourses) {\n                int[] ans = new int[numCourses];\n                int cnt = 0;\n                for (Integer node : visited) {\n                    ans[cnt] = node;\n                    cnt += 1;\n                }\n                return ans;\n            }\n        }\n\n        return new int[0];\n    }\n}\n")),(0,o.kt)("h2",{id:"\u6284\u5b98\u65b9\u7b54\u6848\u7684\u9898\u89e32"},"\u6284\u5b98\u65b9\u7b54\u6848\u7684\u9898\u89e32"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6765\u81ea",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/course-schedule-ii/solution/ke-cheng-biao-ii-by-leetcode-solution/"},"\u5b98\u65b9\u9898\u89e3"))),(0,o.kt)("p",null,"\u62d3\u6251\u6392\u5e8f\uff0c\u53ef\u4ee5\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u5b9e\u73b0\u3002"),(0,o.kt)("p",null,"\u6df1\u5ea6\u4f18\u5148\uff0c\u7ed3\u5408\u6808\u5b9e\u73b0\u3002\u6284\u4e0b\u7b54\u6848\uff1a\u7a0d\u5fae\u6709\u70b9\u7ed5\u7684\u5730\u65b9\u5728\u4e8e\u5165\u6808\u7684\u65b9\u5f0f\uff0c\u8fd9\u91cc\u662f\u4ece\u540e\u5f80\u524d\u653e\uff0cindex\u9012\u51cf\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<List<Integer>> edges;\n    int[] visited;\n    int[] result;\n    int index;\n    boolean valid = true;\n\n    private void dfs(int node) {\n        visited[node] = 1;\n\n        for (int v : edges.get(node)) {\n            if (visited[v] == 0) {\n                dfs(v);\n                if (!valid) {\n                    return;\n                }\n            } else if (visited[v] == 1) {\n                valid = false;\n                return;\n            }\n        }\n\n        visited[node] = 2;\n        result[index--] = node;\n    }\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<>();\n        visited = new int[numCourses];\n        result = new int[numCourses];\n        index = numCourses-1;\n\n        for (int i=0; i<numCourses; i+=1) {\n            edges.add(new ArrayList<>());\n        }\n        for (var pre : prerequisites) {\n            edges.get(pre[1]).add(pre[0]);\n        }\n\n        for (int i=0; i<numCourses && valid; i+=1) {\n            if (visited[i] == 0) {\n                dfs(i);\n            }\n        }\n\n        if (!valid) {\n            return new int[0];\n        }\n\n        return result;\n    }\n}\n")),(0,o.kt)("h2",{id:"\u4ee5\u53ca\u9898\u89e33"},"\u4ee5\u53ca\u9898\u89e33"),(0,o.kt)("p",null,"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5b9e\u73b0\uff0c\u7ed3\u5408\u4e00\u4e2a\u5165\u5ea6\u8868\u3002\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5219\u53ef\u4ee5\u4fee\u70bc\uff1b\u4fee\u70bc\u4e4b\u540e\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u76f8\u8fde\u7684\u8282\u70b9\u5165\u5ea6-1\u3002"),(0,o.kt)("p",null,"\u8fd9\u4e2a\u601d\u8def\u8ddf\u6211\u81ea\u5df1\u601d\u8003\u7684\u601d\u8def\u76f8\u8fd1\uff0c\u4e0d\u8fc7\u7528\u5165\u5ea6\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u6240\u6709\u524d\u7f6e\u8bfe\u7a0b\u4fee\u70bc\u7684\u5224\u65ad\u3002"),(0,o.kt)("p",null,"\u4e0b\u9762\u4e5f\u662f\u6284\u7684\u7b54\u6848\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    List<List<Integer>> edges;\n    int[] indeg;\n    int[] result;\n    int index;\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<>();\n        for (int i=0; i<numCourses; i+=1) {\n            edges.add(new ArrayList<>());\n        }\n        indeg = new int[numCourses];\n        result = new int[numCourses];\n        index = 0;\n\n        for (var pre : prerequisites) {\n            edges.get(pre[1]).add(pre[0]);\n            indeg[pre[0]] += 1;\n        }\n\n        Queue<Integer> queue = new LinkedList<>();\n\n        for (int i=0; i<numCourses; i+=1) {\n            if (indeg[i] == 0) {\n                queue.offer(i);\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            result[index++] = u;\n            for (int v : edges.get(u)) {\n                indeg[v] -= 1;\n                if (indeg[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n\n        if (index != numCourses) {\n            return new int[0];\n        }\n\n        return result;\n    }\n}\n")))}p.isMDXComponent=!0}}]);