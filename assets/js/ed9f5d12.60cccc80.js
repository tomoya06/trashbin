"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3744],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function f(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=f(e,["components","mdxType","originalType","parentName"]),p=i(t),u=o,m=p["".concat(s,".").concat(u)]||p[u]||d[u]||l;return t?r.createElement(m,a(a({ref:n},c),{},{components:t})):r.createElement(m,a({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var f={};for(var s in n)hasOwnProperty.call(n,s)&&(f[s]=n[s]);f.originalType=e,f.mdxType="string"==typeof e?e:o,a[1]=f;for(var i=2;i<l;i++)a[i]=t[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3554:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return f},contentTitle:function(){return s},metadata:function(){return i},toc:function(){return c},Highlight:function(){return d},default:function(){return u}});var r=t(7462),o=t(3366),l=(t(7294),t(3905)),a=["components"],f={tags:["\u6811","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","\u8bbe\u8ba1","\u4e8c\u53c9\u6811","\u5251\u6307offer\u4e13\u9879\u7248"],id:"leetcode_OfferII043",title:"\ud83d\udfe1 \u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9",ques_id:"OfferII043",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/NaqhDT/",online_name:"\u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9",level:"m"},s=void 0,i={unversionedId:"\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII043",id:"\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII043",isDocsHomePage:!1,title:"\ud83d\udfe1 \u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9",description:"<span",source:"@site/docs\\\u5251\u6307offer\u4e13\u9879\u7248\\leetcode_OfferII043.mdx",sourceDirName:"\u5251\u6307offer\u4e13\u9879\u7248",slug:"/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII043",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII043",tags:[{label:"\u6811",permalink:"/trashbin/docs/tags/\u6811"},{label:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/trashbin/docs/tags/\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{label:"\u8bbe\u8ba1",permalink:"/trashbin/docs/tags/\u8bbe\u8ba1"},{label:"\u4e8c\u53c9\u6811",permalink:"/trashbin/docs/tags/\u4e8c\u53c9\u6811"},{label:"\u5251\u6307offer\u4e13\u9879\u7248",permalink:"/trashbin/docs/tags/\u5251\u6307offer\u4e13\u9879\u7248"}],version:"current",frontMatter:{tags:["\u6811","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","\u8bbe\u8ba1","\u4e8c\u53c9\u6811","\u5251\u6307offer\u4e13\u9879\u7248"],id:"leetcode_OfferII043",title:"\ud83d\udfe1 \u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9",ques_id:"OfferII043",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/NaqhDT/",online_name:"\u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9",level:"m"},sidebar:"bffer",previous:{title:"\ud83d\udfe2 \u5251\u6307 Offer II 042. \u6700\u8fd1\u8bf7\u6c42\u6b21\u6570",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII042"},next:{title:"\ud83d\udfe1 \u5251\u6307 Offer II 044. \u4e8c\u53c9\u6811\u6bcf\u5c42\u7684\u6700\u5927\u503c",permalink:"/trashbin/docs/\u5251\u6307offer\u4e13\u9879\u7248/leetcode_OfferII044"}},c=[{value:"\u9898\u89e3 1.\u6709\u70b9\u7ed5\u4e86.py",id:"\u9898\u89e3-1\u6709\u70b9\u7ed5\u4e86py",children:[]},{value:"\u9898\u89e3 2.deque.\u65f6\u95f499.py",id:"\u9898\u89e3-2deque\u65f6\u95f499py",children:[]}],d=function(e){var n=e.children,t=e.color;return(0,l.kt)("span",{style:{backgroundColor:t,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},n)},p={toc:c,Highlight:d};function u(e){var n=e.components,t=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"LeetCode \u63d0\u793a")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"\u9898\u76ee\u96be\u5ea6 ",(0,l.kt)(d,{color:"#ffc01e",mdxType:"Highlight"},"\u4e2d\u7b49")),(0,l.kt)("p",{parentName:"div"},"\u539f\u9898\u94fe\u63a5 ",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/NaqhDT/"},"\ud83d\udd17 leetcode")))),(0,l.kt)("h2",{id:"\u9898\u89e3-1\u6709\u70b9\u7ed5\u4e86py"},"\u9898\u89e3 1.\u6709\u70b9\u7ed5\u4e86.py"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass CBTInserter:\n\n    def __init__(self, root: TreeNode):\n        self.root = root\n        self.lastRow = [root]\n        self.emptyIdx = 0\n        self.lastRowLen = 1\n\n        while self.lastRow:\n            curLen = len(self.lastRow)\n            for idx in range(curLen):\n                cnt = 0\n                if self.lastRow[idx].left:\n                    self.lastRow.append(self.lastRow[idx].left)\n                    cnt += 1\n                if self.lastRow[idx].right:\n                    self.lastRow.append(self.lastRow[idx].right)\n                    cnt += 1\n                if cnt == 2:\n                    pass\n                else:\n                    self.emptyIdx = idx\n                    return\n            self.lastRow = self.lastRow[curLen:]\n            self.lastRowLen = len(self.lastRow)\n\n\n    def insert(self, v: int) -> int:\n        parent = self.lastRow[self.emptyIdx]\n        newNode = TreeNode(v)\n        self.lastRow.append(newNode)\n        if not parent.left:\n            parent.left = newNode\n            return parent.val\n        parent.right = newNode\n        self.emptyIdx += 1\n        if self.emptyIdx == self.lastRowLen:\n            self.lastRow = self.lastRow[self.lastRowLen:]\n            self.lastRowLen = len(self.lastRow)\n            self.emptyIdx = 0\n        return parent.val\n\n\n    def get_root(self) -> TreeNode:\n        return self.root\n\n\n\n# Your CBTInserter object will be instantiated and called as such:\n# obj = CBTInserter(root)\n# param_1 = obj.insert(v)\n# param_2 = obj.get_root()\n")),(0,l.kt)("h2",{id:"\u9898\u89e3-2deque\u65f6\u95f499py"},"\u9898\u89e3 2.deque.\u65f6\u95f499.py"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import deque\n\nclass CBTInserter:\n\n    def __init__(self, root: TreeNode):\n        self.root = root\n        self.queue = deque([root])\n\n        while self.queue:\n            head = self.queue[0]\n            cnt = 0\n            if head.left:\n                cnt += 1\n                self.queue.append(head.left)\n            if head.right:\n                cnt += 1\n                self.queue.append(head.right)\n            if cnt == 2:\n                self.queue.popleft()\n            else:\n                return\n\n\n    def insert(self, v: int) -> int:\n        head = self.queue[0]\n        newNode = TreeNode(v)\n        self.queue.append(newNode)\n        if not head.left:\n            head.left = newNode\n            return head.val\n        head.right = newNode\n        self.queue.popleft()\n        return head.val\n\n\n    def get_root(self) -> TreeNode:\n        return self.root\n\n\n\n# Your CBTInserter object will be instantiated and called as such:\n# obj = CBTInserter(root)\n# param_1 = obj.insert(v)\n# param_2 = obj.get_root()\n")))}u.isMDXComponent=!0}}]);