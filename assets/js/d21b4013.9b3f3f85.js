"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6403],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var f=t.createContext({}),c=function(e){var n=t.useContext(f),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(f.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,f=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,v=p["".concat(f,".").concat(d)]||p[d]||u[d]||a;return r?t.createElement(v,l(l({ref:n},s),{},{components:r})):t.createElement(v,l({ref:n},s))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=p;var i={};for(var f in n)hasOwnProperty.call(n,f)&&(i[f]=n[f]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5506:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return f},metadata:function(){return c},toc:function(){return s},Highlight:function(){return u},default:function(){return d}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],i={tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"],id:"leetcode_offer68v2",title:"\ud83d\udfe2 \u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",ques_id:"offer68v2",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/",online_name:"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",level:"e"},f=void 0,c={unversionedId:"\u5251\u6307offer/leetcode_offer68v2",id:"\u5251\u6307offer/leetcode_offer68v2",isDocsHomePage:!1,title:"\ud83d\udfe2 \u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",description:"<span",source:"@site/docs/\u5251\u6307offer/leetcode_offer68v2.mdx",sourceDirName:"\u5251\u6307offer",slug:"/\u5251\u6307offer/leetcode_offer68v2",permalink:"/trashbin/docs/\u5251\u6307offer/leetcode_offer68v2",tags:[{label:"\u5251\u6307offer",permalink:"/trashbin/docs/tags/\u5251\u6307offer"},{label:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/trashbin/docs/tags/\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"}],version:"current",frontMatter:{tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"],id:"leetcode_offer68v2",title:"\ud83d\udfe2 \u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",ques_id:"offer68v2",platform:"leetcode",online_link:"https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/",online_name:"\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",level:"e"},sidebar:"offer",previous:{title:"\ud83d\udfe2 \u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",permalink:"/trashbin/docs/\u5251\u6307offer/leetcode_offer68v1"}},s=[{value:"\u9898\u89e3 1.py",id:"\u9898\u89e3-1py",children:[]},{value:"\u9898\u89e3 2_\u8fed\u4ee3.py",id:"\u9898\u89e3-2_\u8fed\u4ee3py",children:[]},{value:"\u9898\u89e3 2_\u904d\u5386.py",id:"\u9898\u89e3-2_\u904d\u5386py",children:[]}],u=function(e){var n=e.children,r=e.color;return(0,a.kt)("span",{style:{backgroundColor:r,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},n)},p={toc:s,Highlight:u};function d(e){var n=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"LeetCode \u63d0\u793a")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\u9898\u76ee\u96be\u5ea6 ",(0,a.kt)(u,{color:"#00b8a3",mdxType:"Highlight"},"\u7b80\u5355")),(0,a.kt)("p",{parentName:"div"},"\u539f\u9898\u94fe\u63a5 ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/"},"\ud83d\udd17 leetcode")))),(0,a.kt)("h2",{id:"\u9898\u89e3-1py"},"\u9898\u89e3 1.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        def traval(target):\n            stack = []\n            def doTraval(cur):\n                stack.append(cur)\n                if cur.val == target.val:\n                    return True\n                if cur.left and doTraval(cur.left):\n                    return True\n                if cur.right and doTraval(cur.right):\n                    return True\n                stack.pop(-1)\n                return False\n            doTraval(root)\n            return stack\n        \n        ptravel = traval(p)\n        qtravel = traval(q)\n\n        for i in range(1, min(len(ptravel), len(qtravel))):\n            if ptravel[i] != qtravel[i]:\n                return ptravel[i-1]\n        \n        return ptravel[-1] if len(ptravel) < len(qtravel) else qtravel[-1]\n")),(0,a.kt)("h2",{id:"\u9898\u89e3-2_\u8fed\u4ee3py"},"\u9898\u89e3 2_\u8fed\u4ee3.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        self.ans = None\n        def dfs(cur):\n            if not cur:\n                return False\n            left = dfs(cur.left)\n            righ = dfs(cur.right)\n\n            if (left and righ) or ((cur.val == p.val or cur.val == q.val) and (left or righ)):\n                self.ans = cur\n            \n            return left or righ or (cur.val == p.val or cur.val == q.val)\n        \n        dfs(root)\n        return self.ans\n")),(0,a.kt)("h2",{id:"\u9898\u89e3-2_\u904d\u5386py"},"\u9898\u89e3 2_\u904d\u5386.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        parents = {}\n        def dfs(cur):\n            if not cur:\n                return\n            if cur.left:\n                parents[cur.left] = cur\n                dfs(cur.left)\n            if cur.right:\n                parents[cur.right] = cur\n                dfs(cur.right)\n        \n        dfs(root)\n        visited = {}\n        while p in parents:\n            visited[p] = True\n            p = parents[p]\n        while q in parents:\n            if q in visited:\n                return q\n            q = parents[q]\n        return root\n")))}d.isMDXComponent=!0}}]);